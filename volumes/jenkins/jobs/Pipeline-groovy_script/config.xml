<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1180.v04c4e75dce43">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2077.vc78ec45162f1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2077.vc78ec45162f1">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Pipeline oparty na skrypcie Groovy</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.3">
      <projectUrl>https://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@github.com/cube81/jp_application.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2689.v434009a_31b_f1">
    <script>pipeline {
    agent {
        label &apos;docker-slave&apos;
    }
    tools {
        // Install the Maven version configured as &quot;M3&quot; and add it to the path.
        maven &quot;auto_maven&quot;
    }


      environment {
        //IMAGE = readMavenPom().getArtifactId()
        //VERSION = readMavenPom().getVersion()
        def IMAGE = sh script: &apos;mvn help:evaluate -Dexpression=project.ArtifactId -q -DforceStdout&apos;, returnStdout: true
        def VERSION = sh script: &apos;mvn help:evaluate -Dexpression=project.version -q -DforceStdout&apos;, returnStdout: true
        ANSIBLE = tool name: &apos;Ansible&apos;, type: &apos;com.cloudbees.jenkins.plugins.customtools.CustomTool&apos;
    }
    
    
    stages {
        stage(&apos;Clear running apps&apos;) {
           steps {
               // Clear previous instances of app built
               pwd()
               sh &apos;docker rm -f jpapp || true&apos;
           }
        }
        stage(&apos;Get Code&apos;) {
            steps {
                // Get some code from a GitHub repository
                pwd()
                git branch: &apos;main&apos;, url: &apos;https://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@github.com/cube81/jp_application.git/&apos;
                //checkout scm
            }
        }
        stage(&apos;Build and Junit&apos;) {
            steps {
                // Run Maven on a Unix agent.
                sh &quot;mvn clean install&quot;
            }
        }
        stage(&apos;Build Docker image&apos;){
            steps {
                sh &quot;mvn package -Pdocker&quot;
            }
        }
        stage(&apos;Run Docker app&apos;) {
            steps {
                sh &quot;docker run -d -p 0.0.0.0:8080:8080 --name jpapp -t ${IMAGE}:${VERSION}&quot;
            }
        }
        stage(&apos;Test Selenium&apos;) {
            steps {
                sh &quot;mvn test -Pselenium&quot;
                //println &quot;-----------------------------------------------------------------------------------&quot;
                //println &quot;testy co nie działają&quot;
                //println &quot;-----------------------------------------------------------------------------------&quot;
            }
        }
        stage(&apos;Deploy jar to artifactory&apos;) {
            steps {
                configFileProvider([configFile(fileId: &apos;af103f09-255e-4cd9-be6c-c5bf6a20a9f5&apos;, variable: &apos;MAVEN_GLOBAL_SETTINGS&apos;)]) {
                    sh &quot;mvn -gs $MAVEN_GLOBAL_SETTINGS deploy -Dmaven.test.skip=true -e&quot;
                }
            } 
        }

    }
    post { 
        always { 
            sh &apos;docker stop jpapp&apos;
            //sh &apos;docker ps&apos;
            //deleteDir()
        }
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>